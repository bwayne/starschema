<html>
<meta charset="utf-8">
<style>

.axis text {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.hexagon {
  fill: none;
  stroke: #000;
  stroke-width: .5px;
}

</style>
<body>
<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>	
<script src="http://d3js.org/d3.hexbin.v0.min.js?5c6e4f0"></script>
<!--
<script src="vendor/assets/javascripts/d3-3.4.13.min.js"></script>
<script src="vendor/assets/javascripts/d3.hexbin.v0.min.js"></script>
-->
<script>

	$(function(){
        $.ajax({
           type: 'GET',
           contentType: 'application/json; charset=utf-8',
           url: '/hexbin',
           dataType: 'json',
           success: function (received_data) {
//               $('div').html('<h1>Success</h1>');
				console.log("started the function");
               draw_scatterplot(received_data);
           },
           error: function(result) {
               $('div').html('<h1>you fucked up</h1>');
           }
           
            
        });
        function draw_scatterplot(rubydata) {
	        
	
			var margin = {top: 20, right: 20, bottom: 30, left: 40},
			    width = 960 - margin.left - margin.right,
			    height = 500 - margin.top - margin.bottom;
			
			var randomX = d3.random.normal(width / 2, 80),
			    randomY = d3.random.normal(height / 2, 80),
			    points = d3.range(2000).map(function() { return [randomX(), randomY()]; });
//				points = [];
			
/*
			rubydata.each(function(d, i){
				console.log(d.total_purchases);
				
			});
*/
			
			var color = d3.scale.linear()
			    .domain([0, 30])
			    .range(["white", "steelblue"])
			    .interpolate(d3.interpolateLab);
			
			var hexbin = d3.hexbin()
			    .size([width, height])
			    .radius(5);
			
		
			console.log(hexbin(rubydata));
			
			var x = d3.scale.linear()
				// setting the second value to 1197 because that's the total number of products
			    .domain([0, 1197])
			    .range([0, width])
			
			var y = d3.scale.linear()
				// setting to 7 right now while testing
				// change the 7 to a calculation once the hexbinArray controller script is dynamic
			    .domain([0, 20])
			    .range([height, 0]);
			
			var xAxis = d3.svg.axis()
			    .scale(x)
			    .orient("bottom")
			    .tickSize(6, -height);
			
			var yAxis = d3.svg.axis()
			    .scale(y)
			    .orient("left")
			    .tickSize(6, -width);
			
			var svg = d3.select("body").append("svg")
			    .attr("width", width + margin.left + margin.right)
			    .attr("height", height + margin.top + margin.bottom)
			  .append("g")
			    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
			
			svg.append("clipPath")
			    .attr("id", "clip")
			  .append("rect")
			    .attr("class", "mesh")
			    .attr("width", width)
			    .attr("height", height);
			
			svg.append("g")
			    .attr("clip-path", "url(#clip)")
			  .selectAll(".hexagon")
			    .data(hexbin(rubydata))
			  .enter().append("path")
			    .attr("class", "hexagon")
			    .attr("d", hexbin.hexagon())
			    .attr("transform", function(d, i) { 
				    console.log("y(d[1][1]) = " + y(d[1][1]) + "; d.x = " + d.x);
				    return "translate(" + d.x + "," + y(d[1][1]) + ")"; 
				})
			    .style("fill", function(d) { return color(d.length); });
			
			svg.append("g")
			    .attr("class", "y axis")
			    .call(yAxis);
			
			svg.append("g")
			    .attr("class", "x axis")
			    .attr("transform", "translate(0," + height + ")")
			    .call(xAxis);
			console.log("got to the bottom");
		}
		});
	
</script>
</html>